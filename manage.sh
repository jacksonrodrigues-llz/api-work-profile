#!/bin/bash
#
# CAREER TRACKER - Script de Gerenciamento
# =======================================
#
# ATEN√á√ÉO: Este √© o √öNICO script necess√°rio para gerenciar a aplica√ß√£o.
# Todos os outros scripts foram consolidados aqui.
#
# USO: ./manage.sh [comando]
#
# COMANDOS:
# - setup    : Configura√ß√£o inicial (primeira vez apenas)
# - start    : Iniciar a aplica√ß√£o
# - update   : Atualizar a aplica√ß√£o (preserva o banco de dados)
# - clean    : Limpar banco de dados (CUIDADO: apaga todos os dados)
# - help     : Mostrar ajuda
#
# NOTA: Os testes foram removidos e ser√£o implementados no futuro.
#
# ORDEM DE EXECU√á√ÉO:
# 1. ./manage.sh setup  (apenas na primeira vez)
# 2. ./manage.sh start  (para iniciar)
# 3. ./manage.sh update (para atualiza√ß√µes futuras)
#

# Cores para melhor visualiza√ß√£o
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir o cabe√ßalho
show_header() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                   CAREER TRACKER                       ‚ïë"
    echo "‚ïë            Portal de Progresso Profissional            ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Fun√ß√£o para exibir o menu de ajuda
show_help() {
    echo -e "${YELLOW}Uso:${NC} $0 [comando]"
    echo
    echo "Comandos dispon√≠veis:"
    echo -e "  ${GREEN}setup${NC}    - Configura√ß√£o inicial (executar apenas uma vez)"
    echo -e "  ${GREEN}start${NC}    - Iniciar a aplica√ß√£o"
    echo -e "  ${GREEN}stop${NC}     - Parar a aplica√ß√£o"
    echo -e "  ${GREEN}update${NC}   - Atualizar a aplica√ß√£o preservando o banco de dados"
    echo -e "  ${GREEN}logs${NC}     - Visualizar logs da aplica√ß√£o"
    echo -e "  ${GREEN}status${NC}   - Verificar status dos containers"
    echo -e "  ${GREEN}clean${NC}    - Limpar banco de dados (‚ö†Ô∏è CUIDADO: apaga todos os dados)"
    echo -e "  ${GREEN}help${NC}     - Exibir esta ajuda"
    echo
    echo -e "${YELLOW}Ordem de execu√ß√£o recomendada:${NC}"
    echo "1. ./manage.sh setup    (primeira vez apenas)"
    echo "2. ./manage.sh start    (iniciar a aplica√ß√£o)"
    echo "3. ./manage.sh update   (para atualiza√ß√µes futuras)"
    echo
}

# Fun√ß√£o para configura√ß√£o inicial
setup() {
    echo -e "${BLUE}üîç Verificando se o volume do banco de dados j√° existe...${NC}"
    if docker volume inspect career-tracker-data &> /dev/null; then
        echo -e "${GREEN}‚úÖ Volume career-tracker-data j√° existe. Nenhuma a√ß√£o necess√°ria.${NC}"
    else
        echo -e "${YELLOW}üèóÔ∏è Criando volume externo para o banco de dados...${NC}"
        docker volume create career-tracker-data
        echo -e "${GREEN}‚úÖ Volume career-tracker-data criado com sucesso!${NC}"
    fi
    
    echo -e "${BLUE}üìù Configura√ß√£o conclu√≠da!${NC}"
    echo -e "${YELLOW}Execute agora:${NC} $0 start"
}

# Fun√ß√£o para iniciar a aplica√ß√£o
start() {
    echo -e "${BLUE}üöÄ Iniciando a aplica√ß√£o...${NC}"
    docker compose up -d
    echo -e "${GREEN}‚úÖ Aplica√ß√£o iniciada! Acesse http://localhost:8098${NC}"
    echo -e "${YELLOW}Para ver os logs:${NC} $0 logs"
}

# Fun√ß√£o para parar a aplica√ß√£o
stop() {
    echo -e "${BLUE}üõë Parando a aplica√ß√£o...${NC}"
    docker compose stop
    echo -e "${GREEN}‚úÖ Aplica√ß√£o parada.${NC}"
}

# Fun√ß√£o para atualizar a aplica√ß√£o
update() {
    echo -e "${BLUE}üîÑ Atualizando para a vers√£o mais recente...${NC}"

    # Verificar se estamos em um reposit√≥rio git
    if [ -d ".git" ]; then
        echo -e "${YELLOW}Reposit√≥rio Git detectado. Atualizando c√≥digo...${NC}"
        # Salvar altera√ß√µes locais se houver
        git stash -u

        # Mudar para a branch main e atualizar
        git checkout main
        git pull origin main

        # Aplicar altera√ß√µes locais de volta se houver
        git stash pop || echo -e "${YELLOW}Sem altera√ß√µes locais para aplicar${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Diret√≥rio n√£o √© um reposit√≥rio git. Usando arquivos locais.${NC}"
    fi

    # Parar apenas o container da aplica√ß√£o, mantendo o banco de dados em execu√ß√£o
    echo -e "${BLUE}üõë Parando apenas o container da aplica√ß√£o...${NC}"
    docker compose stop app
    docker compose rm -f app

    # Remover apenas a imagem da aplica√ß√£o
    echo -e "${BLUE}üßπ Removendo apenas a imagem da aplica√ß√£o...${NC}"
    docker rmi api-work-profile:latest || true

    # Construir e iniciar apenas o container da aplica√ß√£o
    echo -e "${BLUE}üèóÔ∏è Construindo e iniciando apenas a aplica√ß√£o...${NC}"
    docker compose build --no-cache app
    docker compose up -d app

    echo -e "${GREEN}‚úÖ Aplica√ß√£o atualizada! Acesse http://localhost:8098${NC}"
}

# Fun√ß√£o para visualizar logs
logs() {
    echo -e "${BLUE}üìä Exibindo logs da aplica√ß√£o...${NC}"
    docker compose logs -f app
}

# Fun√ß√£o para verificar status
status() {
    echo -e "${BLUE}üìä Status dos containers:${NC}"
    docker compose ps
}

# Fun√ß√£o para limpar o banco de dados
clean() {
    echo -e "${RED}‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° apagar TODOS os dados do banco!${NC}"
    echo -e "${RED}‚ö†Ô∏è  Todos os dados cadastrados ser√£o perdidos permanentemente!${NC}"
    read -p "Tem certeza que deseja continuar? (digite 'SIM' para confirmar): " confirmation
    
    if [ "$confirmation" != "SIM" ]; then
        echo -e "${YELLOW}Opera√ß√£o cancelada.${NC}"
        return
    fi
    
    echo -e "${BLUE}üßπ Limpando banco de dados...${NC}"

    # Parar containers
    docker compose down

    # Remover volumes (dados do banco)
    docker compose down -v

    # Remover tabelas
    docker compose up -d db
    sleep 5

    docker exec -i postgres-career psql -U postgres -d careertracker << 'EOF' 2>/dev/null || true
DROP TABLE IF EXISTS databasechangelog CASCADE;
DROP TABLE IF EXISTS databasechangeloglock CASCADE;
DROP TABLE IF EXISTS daily_reports CASCADE;
DROP TABLE IF EXISTS tech_debt_tags CASCADE;
DROP TABLE IF EXISTS tech_debt_tipos CASCADE;
DROP TABLE IF EXISTS tech_debts CASCADE;
DROP TABLE IF EXISTS achievements CASCADE;
DROP TABLE IF EXISTS goals CASCADE;
DROP TABLE IF EXISTS activities CASCADE;
DROP TABLE IF EXISTS users CASCADE;
EOF

    echo -e "${GREEN}‚úÖ Banco limpo! Agora o Liquibase criar√° as tabelas do zero.${NC}"
    echo -e "${YELLOW}Execute:${NC} $0 start"
}

# Verificar se foi passado um comando
if [ $# -eq 0 ]; then
    show_header
    show_help
    exit 0
fi

# Executar o comando apropriado
show_header
case "$1" in
    setup)
        setup
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    update)
        update
        ;;
    logs)
        logs
        ;;
    status)
        status
        ;;
    clean)
        clean
        ;;
    help)
        show_help
        ;;
    *)
        echo -e "${RED}Comando desconhecido: $1${NC}"
        show_help
        exit 1
        ;;
esac

exit 0